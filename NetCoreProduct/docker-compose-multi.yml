# Verifica a sintaxe do arquivo de composição e faz build da imagem da aplicação: $ docker-compose -f docker-compose-multi.yml -p multi build
# Processa o arquivo de composição em segundo plano e inicia a aplicação: $ docker-compose -f docker-compose-multi.yml -p multi up
# Verifica os containeres criados: $ docker-compose ps
# Verifica os logs gerados: $ docker-compose logs
# Remove os containeres, volumes e redes descritas no arquivo de composição: $ docker-compose down -v
# A aplicação estará disponível a partir do navegador no endereço: http://192.168.99.100:3100

# Especifica a versão utilizada pelo esquema do "docker compose"
version: "3"

# Configura os volumes que serão utilizados pelos containeres
volumes:
    ProductData:

# Configura a rede que será utilizada pelos containeres
networks:
    back-end:

# Define os containeres que serão utilizados
services:
    # Container de banco de dados, resultado do desmembramento do comando:
    # $ docker container run -d --name dev_mysql_1 -v dev_ProductData:/var/lib/mysql --network dev_back-end -e MYSQL_ROOT_PASSWORD=12345678 -e bind-address=0.0.0.0 mysql
    mysql:
        # Define a imagem padrão que será utilizada para criar o container
        image: "mysql"
        # Especifica os volumes utilizados pelos containers e os diretórios envolvidos
        volumes:
            - ProductData:/var/lib/mysql
            # Mapeamento entre script de inicialização criado na aplicação e o container do MySQL
            - /d/Projects/Docker/NetCoreProduct/MySQLScripts:/docker-entrypoint-initdb.d
        # Define a rede com a qual o container vai se conectar
        networks:
            - back-end
        # Define as variáveis de ambiente que serão utilizadas quando o container for criado
        environment:
            - MYSQL_ROOT_PASSWORD=12345678
            - bind-address=0.0.0.0

    # Container da aplicação MVC, resultado do desmembramento do comando:
    # $ docker container create --name dev_mvc_1 -p 3000:80 --network dev_back-end -e DBHOST=dev_mysql_1 -e DBPASSWORD=12345678 -e DBPORT=3306 dev_mvc
    mvc:
        # Descreve ao Docker como criar a imagem para o container do serviço
        build:
            # Define o diretório do contexto que será utilizado para criar a imagem. Usa o diretório atual da aplicação MVC
            context: .
            # Especifica o arquivo para criar a imagem
            dockerfile: Dockerfile.multi
        networks:
            # Define a rede com as qual o container vai se conectar
            - back-end
        ports:
            # Define o mapeamento das portas
            - 3100:80
        environment:
            # Define o nome do host
            - DBHOST=mysql
            # Define a senha do mysql
            - DBPASSWORD=12345678
            # Define a porta do mysql
            - DBPORT=3306
            # Com a aplicação executada dentro do container, é necessário expor a porta do container
            - ASPNETCORE_URLS=http://+:80
        depends_on:
            # Lista as dependências dos serviços. Dessa forma o container do MySQL será iniciado antes do container MVC.
            - mysql
